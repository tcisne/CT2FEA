# ct2fea/meshing/fea_writer.py
import meshio
from pathlib import Path
import logging
from typing import Dict, Any
import numpy as np
from ..config import Config


def export_to_abaqus(
    mesh: Any, materials: Dict, config: Config, output_path: Path
) -> None:
    """Export mesh and materials to Abaqus INP format

    Args:
        mesh: PyVista mesh object
        materials: Dictionary of material properties
        config: Configuration settings
        output_path: Output file path
    """
    logger = logging.getLogger(__name__)
    logger.info("Starting Abaqus INP file export")

    # Convert PyVista mesh to meshio format
    cells = [("hexahedron", mesh.cells_dict["hexahedron"])]
    meshio_mesh = meshio.Mesh(mesh.points, cells)

    # Create INP file content
    content = []

    # Header
    content.extend(
        [
            "*Heading",
            f"** Generated by CT2FEA v{config.version}",
            f"** Material model: {config.material_model}",
            "**",
            "*Preprint, echo=NO, model=NO, history=NO, contact=NO",
            "**",
        ]
    )

    # Nodes
    content.extend(
        [
            "*Node",
            _format_nodes(mesh.points),
            "**",
        ]
    )

    # Elements
    content.extend(
        [
            "*Element, type=C3D8R",
            _format_elements(mesh.cells_dict["hexahedron"]),
            "**",
        ]
    )

    # Element sets for different materials
    content.extend(_create_element_sets(mesh))

    # Materials
    content.extend(_define_materials(materials, config))

    # Write to file
    output_path.write_text("\n".join(content))
    logger.info(f"Successfully exported Abaqus INP file to {output_path}")


def _format_nodes(points: np.ndarray) -> str:
    """Format node coordinates for INP file"""
    return "\n".join(
        f"{i + 1}, {p[0]:.6f}, {p[1]:.6f}, {p[2]:.6f}" for i, p in enumerate(points)
    )


def _format_elements(elements: np.ndarray) -> str:
    """Format element connectivity for INP file"""
    return "\n".join(
        f"{i + 1}, " + ", ".join(str(n + 1) for n in e) for i, e in enumerate(elements)
    )


def _create_element_sets(mesh: Any) -> list:
    """Create element sets based on materials"""
    content = []
    material_ids = mesh.cell_data["Material"]

    # Bone elements
    bone_elems = np.where(material_ids == 1)[0] + 1
    if len(bone_elems) > 0:
        content.extend(
            [
                "*Elset, elset=Bone_Elements",
                _format_set_data(bone_elems),
            ]
        )

    # Pore elements
    pore_elems = np.where(material_ids == 2)[0] + 1
    if len(pore_elems) > 0:
        content.extend(
            [
                "*Elset, elset=Pore_Elements",
                _format_set_data(pore_elems),
            ]
        )

    return content


def _define_materials(materials: Dict, config: Config) -> list:
    """Define material properties based on material model"""
    content = []

    if config.material_model == "linear":
        content.extend(_define_linear_materials(materials))
    elif config.material_model == "plasticity":
        content.extend(_define_plastic_materials(materials))
    elif config.material_model == "hyperelastic":
        content.extend(_define_hyperelastic_materials(materials))

    return content


def _define_linear_materials(materials: Dict) -> list:
    """Define linear elastic material properties"""
    return [
        "*Material, name=Bone_Material",
        "*Elastic",
        f"{materials['youngs_modulus']:.1f}, {materials['poissons_ratio']:.3f}",
        "**",
        "*Material, name=Pore_Material",
        "*Elastic",
        "1.0, 0.3",  # Soft material for pores
    ]


def _define_plastic_materials(materials: Dict) -> list:
    """Define elastoplastic material properties"""
    return [
        "*Material, name=Bone_Material",
        "*Elastic",
        f"{materials['youngs_modulus']:.1f}, {materials['poissons_ratio']:.3f}",
        "*Plastic",
        f"{materials['yield_stress']:.1f}, 0.0",
        f"{materials['yield_stress'] * 1.5:.1f}, {materials['hardening_coeff']:.3f}",
    ]


def _define_hyperelastic_materials(materials: Dict) -> list:
    """Define hyperelastic material properties"""
    return [
        "*Material, name=Bone_Material",
        "*Hyperelastic, neo hooke",
        f"{materials['c10']:.3f}, {materials['d1']:.3e}",
    ]


def _format_set_data(indices: np.ndarray, width: int = 16) -> str:
    """Format element/node set data with proper line wrapping"""
    return ",\n".join(
        ", ".join(map(str, chunk))
        for chunk in np.array_split(indices, np.ceil(len(indices) / width))
    )
